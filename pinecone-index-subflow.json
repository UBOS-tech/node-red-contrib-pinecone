{
	"id": "70c990f5226211c0",
	"type": "subflow",
	"name": "Pinecone Index",
	"info": "## Properties\n\n```js\nmsg.PINECONE_API_KEY = \"Your API key\";\nmsg.PINECONE_ENVIRONMENT = \"Your environment\";\nmsg.PINECONE_BASE_URL = \"https://controller.[Your environment].pinecone.io\";\n```\n\n1. When `msg.actionType` is set to `list_collections`: This operation returns a list of your Pinecone collections\n\n2. When `msg.actionType` is set to `create_collection`:\n    - **[Required]** `name`: [Type: string] The name of the collection to be created\n    \n    - **[Required]** `source`: [Type: string] The name of the source index to be used as the source for the collection\n\n3. When `msg.actionType` is set to `describe_collection`:\n    - **[Required]** `name`: [Type: string] The name of the collection\n\n4. When `msg.actionType` is set to `delete_collection`: \n    - **[Required]** `name`: [Type: string] The name of the collection\n\n5. When `msg.actionType` is set to `list_collections`: This operation returns a list of your Pinecone indexes\n\n6. When `msg.actionType` is set to `create_index`:\n    - **[Required]** `name`: [Type: string] The name of the collection to be created\n\n    - **[Required]** `dimension`: [Type: integer] The dimensions of the vectors to be inserted in the index\n    - `metric`: [Type: string] The distance metric to be used for similarity search. You can use 'euclidean', 'cosine', or 'dotproduct'\n    - `pods`: [Type: integer] The number of pods for the index to use,including replicas\n    - `replicas`: [Type: integer] The number of replicas. Replicas duplicate your index. They provide higher availability and throughput\n    - `pod_type`: [Type: string] The type of pod to use. One of **s1**, **p1**, or **p2** appended with **.** and one of **x1**, **x2**, **x4**, or **x8**.\n    - `metadata_config`: [Type: object | null] Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when metadata_config is present, only specified metadata fields are indexed. To specify metadata fields to index, provide a JSON object of the following form:\n    ```json\n    {\"indexed\": [\"example_metadata_field\"]}\n    ```\n    - `source_collection`: [Type: string] The name of the collection to create an index from\n\nExample:\n```json\n    msg.payload = {\n        name: \"pinecone-index\",\n        metric: \"cosine\",\n        pods: 1,\n        replicas: 1,\n        pod_type: \"p1.x1\"\n    }\n```\n\n7. When `msg.actionType` is set to `describe_index`:\n    - **[Required]** `name`: [Type: string] The name of the collection\n\n8. When `msg.actionType` is set to `delete_index`:\n    - **[Required]** `name`: [Type: string] The name of the collection\n\n9. When `msg.actionType` is set to `configure_index`:\n    - **[Required]** `name`: [Type: string] The name of the collection\n\n    - `replicas`: [Type: string] The desired number of replicas for the index\n    - `pod_type`: [Type: string] The new pod type for the index. One of **s1**, **p1**, or **p2** appended with **.** and one of **x1**, **x2**, **x4**, or **x8**.",
	"category": "",
	"in": [
		{
			"x": 100,
			"y": 160,
			"wires": [
				{
					"id": "a658e8eeeca4a302"
				}
			]
		}
	],
	"out": [
		{
			"x": 700,
			"y": 140,
			"wires": [
				{
					"id": "a658e8eeeca4a302",
					"port": 0
				},
				{
					"id": "98bd7701e736895c",
					"port": 0
				}
			]
		}
	],
	"env": [
		{
			"name": "actionType",
			"type": "str",
			"value": "create_index",
			"ui": {
				"icon": "font-awesome/fa-sign-out",
				"label": {
					"en-US": "Type"
				},
				"type": "select",
				"opts": {
					"opts": [
						{
							"l": {
								"en-US": "create_index"
							},
							"v": "create_index"
						},
						{
							"l": {
								"en-US": "configure_index"
							},
							"v": "configure_index"
						},
						{
							"l": {
								"en-US": "describe_index"
							},
							"v": "describe_index"
						},
						{
							"l": {
								"en-US": "list_indexes"
							},
							"v": "list_indexes"
						},
						{
							"l": {
								"en-US": "delete_index"
							},
							"v": "delete_index"
						},
						{
							"l": {
								"en-US": "create_collection"
							},
							"v": "create_collection"
						},
						{
							"l": {
								"en-US": "describe_collection"
							},
							"v": "describe_collection"
						},
						{
							"l": {
								"en-US": "list_collections"
							},
							"v": "list_collections"
						},
						{
							"l": {
								"en-US": "delete_collection"
							},
							"v": "delete_collection"
						}
					]
				}
			}
		},
		{
			"name": "apiKey",
			"type": "cred",
			"ui": {
				"icon": "font-awesome/fa-sign-out",
				"label": {
					"en-US": "API Key"
				},
				"type": "input",
				"opts": {
					"types": [
						"cred"
					]
				}
			}
		},
		{
			"name": "environment",
			"type": "cred",
			"ui": {
				"icon": "font-awesome/fa-sign-out",
				"label": {
					"en-US": "Environment"
				},
				"type": "input",
				"opts": {
					"types": [
						"cred"
					]
				}
			}
		}
	],
	"meta": {
		"module": "node-red-contrib-pinecone-ubos",
		"type": "pinecone-index-ubos",
		"version": "1.0.0",
		"author": "vovajr11",
		"desc": "Descr",
		"keywords": "node-red",
		"license": "MIT"
	},
	"credentials": {
		"apiKey": "",
		"environment": ""
	},
	"color": "#3FADB5",
	"icon": "node-red/leveldb.png",
	"status": {
		"x": 220,
		"y": 260,
		"wires": [
			{
				"id": "d6b1390ae936e28f",
				"port": 0
			}
		]
	},
	"flow": [
		{
			"id": "d6b1390ae936e28f",
			"type": "status",
			"z": "70c990f5226211c0",
			"name": "",
			"scope": [
				"a658e8eeeca4a302",
				"98bd7701e736895c"
			],
			"x": 100,
			"y": 260,
			"wires": [
				[]
			]
		},
		{
			"id": "a658e8eeeca4a302",
			"type": "function",
			"z": "70c990f5226211c0",
			"name": "init",
			"func": "/*\n  Type: Main\n  @param \"PINECONE_API_KEY\" {string} Required\n  @param \"PINECONE_ENVIRONMENT\" {string} Required\n  @param \"PINECONE_TABLE_NAME\" {string} Optional\n*/\n\n/*\n  actionType: create_index\n  @param \"name\" {string} Required\n  @param \"dimension\" {integer} Required\n  @param \"metric\" {string} Optional | \"euclidean\", \"cosine\", \"dotproduct\"\n  @param \"pods\" {integer} Optional | Default 1\n  @param \"replicas\" {integer} Optional | Default 1\n  @param \"pod_type\" {string} Optional | Default p1.x1\n  @param \"metadata_config\" {object | null} Optional | {\"indexed\": [\"example_metadata_field\"]} \n  @param \"source_collection\" {string} Optional\n*/\n\n/*\n  actionType: delete_index\n  @param \"indexName\" {string} Required\n*/\n\n/*\n  actionType: describe_index\n  @param \"indexName\" {string} Required\n*/\n\nconst apiKey = msg.PINECONE_API_KEY || env.get(\"apiKey\");\nconst environment = msg.PINECONE_ENVIRONMENT || env.get(\"environment\");\nconst baseURL = msg.PINECONE_BASE_URL;\n\nconst { PineconeClient } = pineconeDB;\nconst client = new PineconeClient();\n\nawait client.init({ apiKey, environment });\n\nconst actionType = msg.actionType || env.get(\"actionType\");\nmsg.actionType = actionType;\n\nconst { \n  name, \n  dimension, \n  metric, \n  pods, \n  replicas, \n  pod_type, \n  metadata_config, \n  source_collection,\n  source\n} = msg.payload;\n\nmsg.headers = {\n  'Api-Key': apiKey,\n  'content-type': 'application/json',\n};\n\nif (actionType === \"create_index\") {\n  reqStatus();\n\n  msg.method = \"POST\";\n  msg.url = `${baseURL}/databases`;\n  msg.payload = {\n    name,\n    dimension,\n    metric,\n    pods,\n    replicas,\n    pod_type,\n    metadata_config,\n    source_collection \n  };\n\n  return [null, msg];\n}\n\nif (actionType === \"delete_index\") {\n  msg.method = \"DELETE\";\n  msg.url = `${baseURL}/databases/${name}`;\n\n  return [null, msg];\n}\n\nif (actionType === \"describe_index\") {\n  msg.method = \"GET\";\n  msg.url = `${baseURL}/databases/${name}`;\n\n  return [null, msg];\n}\n\nif (actionType === \"list_indexes\") {\n  msg.method = \"GET\";\n  msg.url = `${baseURL}/databases`;\n\n  return [null, msg];\n}\n\nif (actionType === \"configure_index\") {\n  reqStatus();\n\n  msg.method = \"PATCH\";\n  msg.url = `${baseURL}/databases/${name}`;\n  msg.payload = { replicas, pod_type };\n\n  return [null, msg];\n}\n\nif (actionType === \"create_collection\") {\n  reqStatus();\n\n  msg.method = \"POST\";\n  msg.url = `${baseURL}/collections`;\n  msg.payload = { name, source };\n\n  return [null, msg];\n}\n\nif (actionType === \"describe_collection\") {\n  reqStatus();\n\n  msg.method = \"GET\";\n  msg.url = `${baseURL}/collections/${name}`;\n\n  return [null, msg];\n}\n\nif (actionType === \"list_collections\") {\n  reqStatus();\n\n  msg.method = \"GET\";\n  msg.url = `${baseURL}/collections`;\n\n  return [null, msg];\n}\n\nif (actionType === \"delete_collection\") {\n  reqStatus();\n\n  msg.method = \"DELETE\";\n  msg.url = `${baseURL}/collections/${name}`;\n\n  return [null, msg];\n}\n\nreturn [msg, null];\n\nfunction reqStatus() {\n  return node.status({ fill: \"blue\", shape: \"dot\", text: \"requesting\" });\n}\n",
			"outputs": 2,
			"noerr": 0,
			"initialize": "// Code added here will be run once\n// whenever the node is started.\nconst { PineconeClient } = pineconeDB;\nconst pinecone = new PineconeClient();\n\ntry {\n    await pinecone.init({\n        apiKey: env.get(\"apiKey\"),\n        environment: env.get(\"environment\"),\n    });\n\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Connected\" });\n} catch (error) {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Unauthorized\" });\n    node.send({\n        type: \"error\",\n        error\n    });\n};\n\n// if (pinecone) {\n//     node.status({ fill: \"green\", shape: \"dot\", text: \"Connected\" });\n// }",
			"finalize": "",
			"libs": [
				{
					"var": "pineconeDB",
					"module": "@pinecone-database/pinecone"
				}
			],
			"x": 210,
			"y": 160,
			"wires": [
				[],
				[
					"39d6bad8d72f6643"
				]
			]
		},
		{
			"id": "98bd7701e736895c",
			"type": "function",
			"z": "70c990f5226211c0",
			"name": "set status",
			"func": "node.status({ fill: \"green\", shape: \"dot\", text: \"finished\" });\n\nreturn msg;",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 580,
			"y": 200,
			"wires": [
				[]
			]
		},
		{
			"id": "42344cbe875d0210",
			"type": "http request",
			"z": "70c990f5226211c0",
			"name": "",
			"method": "use",
			"ret": "obj",
			"paytoqs": "ignore",
			"url": "",
			"tls": "",
			"persist": false,
			"proxy": "",
			"insecureHTTPParser": false,
			"authType": "",
			"senderr": false,
			"headers": [],
			"x": 415,
			"y": 180,
			"wires": [
				[
					"98bd7701e736895c"
				]
			],
			"l": false
		},
		{
			"id": "39d6bad8d72f6643",
			"type": "function",
			"z": "70c990f5226211c0",
			"name": "function 18",
			"func": "const returnStringFormat = [\n    \"configure_index\",\n    \"create_index\",\n    \"delete_index\",\n    \"create_collection\",\n    \"delete_collection\",\n];\n\nconst findType = returnStringFormat.find(el => el === msg.actionType);\n\nif (findType) {\n    return [null, msg]\n} else {\n    return [msg, null]\n}\n",
			"outputs": 2,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 325,
			"y": 200,
			"wires": [
				[
					"42344cbe875d0210"
				],
				[
					"02bd1d6d76be878e"
				]
			],
			"icon": "node-red/cog.svg",
			"l": false
		},
		{
			"id": "02bd1d6d76be878e",
			"type": "http request",
			"z": "70c990f5226211c0",
			"name": "",
			"method": "use",
			"ret": "txt",
			"paytoqs": "ignore",
			"url": "",
			"tls": "",
			"persist": false,
			"proxy": "",
			"insecureHTTPParser": false,
			"authType": "",
			"senderr": false,
			"headers": [],
			"x": 415,
			"y": 220,
			"wires": [
				[
					"98bd7701e736895c"
				]
			],
			"l": false
		}
	]
}